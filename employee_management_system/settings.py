"""
Django settings for employee_management_system project.

Generated by 'django-admin startproject' using Django 3.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

from decouple import Csv, config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ENV_FILE = Path(BASE_DIR, 'env/.env')

def get_env(variable, cast, default_value=None, source_cast=None):
    """
    This function is to remove the unnecessary calls for fetching the variables either
    from the environment or the .env file. This would also keep the consistency to
    always fetch the variables in the same manner

    :param variable: The variable to fetch from the environment or .env
    :param cast: Type cast to str, bool, int etc
    :param default_value: If no variable is found, use this value
    :param source_cast: If the variable is in another type, then specify it to be
                                            changed into `cast` type
    :return: The value to be expected from the variable
    """

    if source_cast:
        return cast(source_cast(os.environ.get(key=variable, default=default_value))) \
            if not os.path.exists(ENV_FILE) else config(variable, cast=cast, default=default_value)
    return cast(os.environ.get(key=variable, default=default_value)) \
        if not os.path.exists(ENV_FILE) else config(variable, cast=cast, default=default_value)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env('SECRET', str)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env('DEBUG', bool, 0, int)

# Django global log level
DJANGO_LOG_LEVEL = get_env('DJANGO_LOG_LEVEL', str, 'INFO')

ALLOWED_HOSTS = get_env('ALLOWED_HOSTS', Csv(), [])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'employee_management_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'employee_management_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': get_env('DB_ENGINE', str),
        'HOST': get_env('DB_HOST', str),
        'PORT': get_env('DB_PORT', int),
        'NAME': get_env('DB_NAME', str),
        'USER': get_env('DB_USERNAME', str),
        'PASSWORD': get_env('DB_PASSWORD', str),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
